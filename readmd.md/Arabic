Altius Benchtools
هذه مجموعة من الأدوات لقياس أداء Altius، تتضمن مُحللًا لتتبع تنفيذ خادوم RPC ومولد معاملات لحالات اختبار Ethereum.
نصيحة: ابدأ بتشغيل المثال في examples/how_to_use_profiler.rs لترى المحلل أثناء العمل وتفهم أنماط استخدامه المختلفة.
1. المحلل (Profiler)
أداة لتتبع وتحليل تنفيذ خادوم RPC مع قدرات مفصلة لقياس الوقت وتتبع الأحداث.
الميزات
قياس وقت المهام مع علامات البداية/النهاية

دعم التحليل متعدد الخيوط

تعليق الأحداث مع ملاحظات وأوصاف

تنسيقات إخراج JSON وZIP

معالجة خاصة لأحداث المعاملات والتأكيدات

الاستخدام

// بدء قياس وقت مهمة
profiler::start("task_name");

// ... الكود الخاص بك هنا ...

// إضافة ملاحظات إلى المهمة الحالية
profiler::note_str("task_name", "key", "value");

// ... الكود الخاص بك هنا ...

// إنهاء قياس وقت مهمة
profiler::end("task_name");

// تصدير النتائج
profiler::dump_json("output.json");
// أو
profiler::dump_zip("output");

الاستخدام متعدد الخيوط
يدعم المحلل العمليات المتزامنة عبر خيوط متعددة:

// في أي خيط
profiler::start_multi("thread_task");

// ... الكود الخاص بك هنا ...

// في أي خيط
profiler::note_str_multi("thread_task", "thread_info", "worker_1");

// ... الكود الخاص بك هنا ...

// في أي خيط
profiler::end_multi("thread_task");

// ... الكود الخاص بك هنا ...

// تصدير النتائج
profiler::dump_json("output.json");
// أو
profiler::dump_zip("output");

تنسيق الإخراج
يولد المحلل هيكل JSON يحتوي على:
معلومات توقيت لكل مهمة

تعريف الخيوط

تعليقات وملاحظات مخصصة

تفاصيل أحداث المعاملات والتأكيدات

مثال على إخراج JSON:

{
  "details": [
    {
      "detail": {
        "hash": "0x26b7c694ff75f0b4ee85b5ca2e3cc1c332b41a64982c2b454e0493497b8e76b9",
        "type": "transaction"
      },
      "end": 212387237,
      "runtime": 31286,
      "start": 212355951,
      "status": "success",
      "tx": "125",
      "type": "transaction"
    },
    // ...المزيد من المحتوى...
  ],
  [ "..." ]
}

2. مولد المعاملات (Transaction Generator)
هذه الأداة تولد ملف JSON يحتوي على قائمة بالمعاملات وحالة مسبقة للبلوك تشين.
الاستخدام
شغّل cargo build --release --features generator لبناء المشروع.

شغّل ./target/release/generate --help لمعرفة الخيارات المتاحة.

استخدام نقل ETH
بعد بناء المشروع، يمكنك استخدام الأوامر التالية لتوليد حالات اختبار:
إنشاء ملف JSON يحتوي على 100 معاملة نقل ETH في 10 مجموعات، باستخدام نمط واحد إلى متعدد، وحفظه في ./test-case.json:

./target/release/generate pattern -y o2m -t 100 -g 10 -o ./test-case.json
# أو
./target/release/generate pattern -y one-to-many -t 100 -g 10 -o ./test-case.json

تنسيق الإخراج
ملف JSON الناتج هو قائمة بالمعاملات وحالة مسبقة للبلوك تشين. مثال على JSON:

{
  "just-test": {
    "_info": { "...": "..." },
    "env": { "...": "..." },
    "pre": {
      "0xcc2564c36a3440e7d6dd4c67b50f885edbfa5141": {
        "balance": "0x056bc75e2d63100000",
        "code": "0x",
        "nonce": "0x00",
        "storage": {}
      }
    },
    "transaction": [
      // ...بيانات المعاملات...
    ]
  }
}

كيفية المساهمة
نرحب بالمساهمات في مشروع Altius Benchtools! إليك كيف يمكنك المشاركة:
الإبلاغ عن المشكلات: تحقق من صفحة Issues لمعرفة ما إذا تم الإبلاغ عن مشكلتك مسبقًا؛ إذا لم يكن كذلك، أنشئ مشكلة جديدة مع وصف واضح وخطوات لإعادة الإنتاج.

المساهمة بالكود:
قم بعمل fork للمستودع على GitHub.

استنسخ الـ fork محليًا: git clone https://github.com/YOUR-USERNAME/toolbench.git

أنشئ فرعًا جديدًا: git checkout -b feature/your-feature-name

ارفع تغييراتك وقدم طلب سحب (Pull Request) إلى المستودع الرئيسي.

