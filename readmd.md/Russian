Altius Benchtools
Это коллекция инструментов для тестирования производительности Altius, включающая профайлер для отслеживания выполнения сервера RPC и генератор транзакций для тестовых случаев Ethereum.
Совет: Начните с запуска примера в examples/how_to_use_profiler.rs, чтобы увидеть профайлер в действии и понять различные шаблоны его использования.
1. Профайлер (Profiler)
Инструмент для отслеживания и профилирования выполнения сервера RPC с подробными возможностями измерения времени и отслеживания событий.
Особенности
Измерение времени задач с маркерами начала/конца

Поддержка многопоточного профилирования

Аннотация событий с заметками и описаниями

Форматы вывода JSON и ZIP

Специальная обработка событий транзакций и коммитов

Использование

// Начать измерение времени задачи
profiler::start("task_name");

// ... ваш код здесь ...

// Добавить заметки к текущей задаче
profiler::note_str("task_name", "key", "value");

// ... ваш код здесь ...

// Завершить измерение времени задачи
profiler::end("task_name");

// Экспортировать результаты
profiler::dump_json("output.json");
// или
profiler::dump_zip("output");

Многопоточное использование
Профайлер поддерживает одновременные операции в нескольких потоках:

// В любом потоке
profiler::start_multi("thread_task");

// ... ваш код здесь ...

// В любом потоке
profiler::note_str_multi("thread_task", "thread_info", "worker_1");

// ... ваш код здесь ...

// В любом потоке
profiler::end_multi("thread_task");

// ... ваш код здесь ...

// Экспортировать результаты
profiler::dump_json("output.json");
// или
profiler::dump_zip("output");

Формат вывода
Профайлер создает структуру JSON, содержащую:
Информацию о времени выполнения каждой задачи

Идентификацию потоков

Пользовательские аннотации и заметки

Подробности событий транзакций и коммитов

Пример вывода JSON:

{
  "details": [
    {
      "detail": {
        "hash": "0x26b7c694ff75f0b4ee85b5ca2e3cc1c332b41a64982c2b454e0493497b8e76b9",
        "type": "transaction"
      },
      "end": 212387237,
      "runtime": 31286,
      "start": 212355951,
      "status": "success",
      "tx": "125",
      "type": "transaction"
    },
    // ...дополнительный контент...
  ],
  [ "..." ]
}

2. Генератор транзакций (Transaction Generator)
Этот инструмент создает файл JSON, содержащий список транзакций и предварительное состояние блокчейна.
Использование
Выполните cargo build --release --features generator для сборки проекта.

Выполните ./target/release/generate --help, чтобы увидеть доступные опции.

Использование для переводов ETH
После сборки проекта вы можете использовать следующие команды для создания тестовых случаев:
Сгенерировать файл JSON с 100 транзакциями перевода ETH в 10 группах, используя шаблон "один ко многим", и сохранить его в ./test-case.json:

./target/release/generate pattern -y o2m -t 100 -g 10 -o ./test-case.json
# или
./target/release/generate pattern -y one-to-many -t 100 -g 10 -o ./test-case.json

Формат вывода
Выходной файл JSON представляет собой список транзакций и предварительное состояние блокчейна. Пример JSON:

{
  "just-test": {
    "_info": { "...": "..." },
    "env": { "...": "..." },
    "pre": {
      "0xcc2564c36a3440e7d6dd4c67b50f885edbfa5141": {
        "balance": "0x056bc75e2d63100000",
        "code": "0x",
        "nonce": "0x00",
        "storage": {}
      }
    },
    "transaction": [
      // ...данные транзакций...
    ]
  }
}

Как внести вклад
Мы приветствуем вклад в проект Altius Benchtools! Вот как вы можете участвовать:
Сообщение о проблемах: Проверьте страницу Issues, чтобы узнать, была ли ваша проблема уже зарегистрирована; если нет, создайте новую с четким описанием и шагами для воспроизведения.

Вклад в код:
Сделайте fork репозитория на GitHub.

Клонируйте ваш fork локально: git clone https://github.com/YOUR-USERNAME/toolbench.git

Создайте новую ветку: git checkout -b feature/your-feature-name

Отправьте изменения и создайте Pull Request в основной репозиторий.

