Altius Benchtools
यह Altius बेंचमार्किंग के लिए उपकरणों का एक संग्रह है, जिसमें RPC सर्वर निष्पादन ट्रेसिंग के लिए एक प्रोफाइलर और Ethereum परीक्षण मामलों के लिए एक ट्रांजेक्शन जेनरेटर शामिल है।
सुझाव: examples/how_to_use_profiler.rs में उदाहरण को चलाकर शुरू करें ताकि प्रोफाइलर को कार्य करते हुए देख सकें और इसके विभिन्न उपयोग पैटर्न को समझ सकें।
1. प्रोफाइलर (Profiler)
RPC सर्वर निष्पादन को ट्रेस करने और प्रोफाइल करने के लिए एक उपकरण, जिसमें विस्तृत समय मापन और घटना ट्रैकिंग क्षमताएं हैं।
विशेषताएं
कार्य समय मापन शुरू/अंत मार्करों के साथ

मल्टी-थ्रेडेड प्रोफाइलिंग समर्थन

नोट्स और विवरण के साथ घटना एनोटेशन

JSON और ZIP आउटपुट प्रारूप

ट्रांजेक्शन और कमिट घटनाओं के लिए विशेष हैंडलिंग

उपयोग

// एक कार्य का समय मापन शुरू करें
profiler::start("task_name");

// ... आपका कोड यहाँ ...

// वर्तमान कार्य में नोट्स जोड़ें
profiler::note_str("task_name", "key", "value");

// ... आपका कोड यहाँ ...

// एक कार्य का समय मापन समाप्त करें
profiler::end("task_name");

// परिणाम निर्यात करें
profiler::dump_json("output.json");
// या
profiler::dump_zip("output");

मल्टी-थ्रेडेड उपयोग
प्रोफाइलर कई थ्रेड्स में समवर्ती संचालन का समर्थन करता है:

// किसी भी थ्रेड में
profiler::start_multi("thread_task");

// ... आपका कोड यहाँ ...

// किसी भी थ्रेड में
profiler::note_str_multi("thread_task", "thread_info", "worker_1");

// ... आपका कोड यहाँ ...

// किसी भी थ्रेड में
profiler::end_multi("thread_task");

// ... आपका कोड यहाँ ...

// परिणाम निर्यात करें
profiler::dump_json("output.json");
// या
profiler::dump_zip("output");

आउटपुट प्रारूप
प्रोफाइलर एक JSON संरचना उत्पन्न करता है जिसमें शामिल हैं:
प्रत्येक कार्य के लिए समय की जानकारी

थ्रेड पहचान

कस्टम एनोटेशन और नोट्स

ट्रांजेक्शन और कमिट घटनाओं का विवरण

आउटपुट JSON का उदाहरण:

{
  "details": [
    {
      "detail": {
        "hash": "0x26b7c694ff75f0b4ee85b5ca2e3cc1c332b41a64982c2b454e0493497b8e76b9",
        "type": "transaction"
      },
      "end": 212387237,
      "runtime": 31286,
      "start": 212355951,
      "status": "success",
      "tx": "125",
      "type": "transaction"
    },
    // ...और सामग्री...
  ],
  [ "..." ]
}

2. ट्रांजेक्शन जेनरेटर (Transaction Generator)
यह उपकरण एक JSON फाइल उत्पन्न करता है जिसमें ट्रांजेक्शनों की सूची और ब्लॉकचेन की प्री-स्टेट शामिल होती है।
उपयोग
प्रोजेक्ट को बनाने के लिए cargo build --release --features generator चलाएं।

उपलब्ध विकल्पों को देखने के लिए ./target/release/generate --help चलाएं।

ETH ट्रांसफर उपयोग
प्रोजेक्ट बनाने के बाद, आप निम्नलिखित कमांड का उपयोग करके परीक्षण मामले उत्पन्न कर सकते हैं:
100 ETH ट्रांसफर ट्रांजेक्शनों के साथ एक JSON फाइल उत्पन्न करें, 10 समूहों में, एक-से-कई पैटर्न का उपयोग करके, और इसे ./test-case.json में सहेजें:

./target/release/generate pattern -y o2m -t 100 -g 10 -o ./test-case.json
# या
./target/release/generate pattern -y one-to-many -t 100 -g 10 -o ./test-case.json

आउटपुट प्रारूप
आउटपुट JSON फाइल ट्रांजेक्शनों की सूची और ब्लॉकचेन की प्री-स्टेट है। उदाहरण JSON:

{
  "just-test": {
    "_info": { "...": "..." },
    "env": { "...": "..." },
    "pre": {
      "0xcc2564c36a3440e7d6dd4c67b50f885edbfa5141": {
        "balance": "0x056bc75e2d63100000",
        "code": "0x",
        "nonce": "0x00",
        "storage": {}
      }
    },
    "transaction": [
      // ...ट्रांजेक्शन डेटा...
    ]
  }
}

योगदान कैसे करें
हम Altius Benchtools प्रोजेक्ट में योगदान का स्वागत करते हैं! यहाँ बताया गया है कि आप कैसे भाग ले सकते हैं:
समस्याओं की रिपोर्टिंग: Issues पेज पर जाँच करें कि क्या आपकी समस्या पहले से रिपोर्ट की गई है; यदि नहीं, तो एक नया मुद्दा बनाएं जिसमें स्पष्ट विवरण और पुनरुत्पादन के चरण हों।

कोड में योगदान:
GitHub पर रिपॉजिटरी को fork करें।

स्थानीय रूप से क्लोन करें: git clone https://github.com/YOUR-USERNAME/toolbench.git

एक नई शाखा बनाएं: git checkout -b feature/your-feature-name

अपने परिवर्तन सबमिट करें और मुख्य रिपॉजिटरी में Pull Request बनाएं।

